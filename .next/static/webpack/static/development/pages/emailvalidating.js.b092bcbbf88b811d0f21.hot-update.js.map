{"version":3,"file":"static/webpack/static\\development\\pages\\emailvalidating.js.b092bcbbf88b811d0f21.hot-update.js","sources":["webpack:///./src/useEmailValidation.js","webpack:///./src/useInterval.js"],"sourcesContent":["import React, { useState, useReducer } from \"react\";\r\nimport useInterval from \"./useInterval\";\r\n\r\nconst useEmailVaidation = secondsFormValidFor => {\r\n  const validateEmail = email => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n  };\r\n  const [emailValid, setEmailValid] = useState(false);\r\n  const reducer = (state, action) => {\r\n    state = action;\r\n    setEmailValid(validateEmail(state));\r\n    return action;\r\n  };\r\n  const [email, setEmail] = useReducer(reducer, \"\");\r\n  const [count, setCount] = useState(secondsFormValidFor);\r\n  useInterval(\r\n    () => {\r\n      setCount(count - 1);\r\n    },\r\n    count > 0 ? 1000 : null\r\n  );\r\n\r\n  return { count, email, setEmail, emailValid };\r\n};\r\n\r\nexport default useEmailVaidation;\r\n","// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\nexport default useInterval;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}