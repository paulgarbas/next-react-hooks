{"version":3,"file":"static/webpack/static\\development\\pages\\speakers.js.6841919335f75aebc4c6.hot-update.js","sources":["webpack:///./src/useAxiosFetch.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state, isLoading: true, isError: false };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: action.payload\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: true,\n        errorMessage: \"Data Retrieve Failure\"\n      };\n    case \"REPLACE_DATA\":\n      // The record passed (state.data) must have the attribute \"id\"\n      const newData = state.data.map(rec => {\n        return rec.id === action.replacerecord.id ? action.replacerecord : rec;\n      });\n      return {\n        ...state,\n        isLoading: false,\n        hasErrored: false,\n        errorMessage: \"\",\n        data: newData\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useAxiosFetch = initialUrl => {\n  const [url] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    hasErrored: false,\n    errorMessage: \"\",\n    data: []\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      try {\n        let result = await axios.get(url);\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n        }\n      } catch (err) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\" });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const updateDataRecord = record => {\n    dispatch({\n      type: \"REPLACE_DATA\",\n      replacerecord: record\n    });\n  };\n\n  return { ...state, updateDataRecord };\n};\n\nexport default useAxiosFetch;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AA/BA;AAiCA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAJA;AAHA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}